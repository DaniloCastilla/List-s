package Binary_Tree;

/**
 * 
 * @author Danilo Castilla
 * @date 10/03/1018
 * @version 1.0
 * @description: Implement the concept of linked lists
 * 
 */
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;

public class Tree {//Class List
	
	public static Node_Tree root = null; //Empty list
	
	public boolean isEmpty() {//Method Check if empty
		
		return root == null ? true : false;
		
	}//end method
	
	public void insert(Node_Tree newNode){//Method insert at begin of the list
		
		if(root == null) {
			root = newNode;
		}else {
			
			Node_Tree temp = root;
			Node_Tree parent = root;
			
			while(temp != null) {
				
				parent = temp;
				
				if(temp.Value > newNode.Value) {
					
					temp = temp.left;
					
				}else{
					
					temp = temp.right;
				}
				
			}
			
			if(parent.Value < newNode.Value)
				parent.right = newNode;
			else 
				parent.left = newNode;
		}
		
	}//end method
	
	public Node_Tree Search(int Value) {//Binary search
		
		Node_Tree temp = root;
		
		while(temp != null) {
			
			if(temp.Value == Value) {
				break;
			}
			if(temp.Value > Value) {
				
				temp = temp.left;
				
			}else{
				
				temp = temp.right;
			}
			
		}
		return temp;
	}
	
	public void printTree(Node_Tree node) throws IOException {
		
		if(node!=null) {
			System.out.println(node.toString());
			printTree(node.left);
			System.out.println("-");
			printTree(node.right);
		}
	}
	
	public void inOrden(Node_Tree root) {
		
		if(root != null) {
			
			inOrden(root.left);
			System.out.println(root.Value);
			inOrden(root.right);
			
		}
		
	}
	
	public void postOrden(Node_Tree root) {
		
		if(root != null) {
			
			inOrden(root.left);
			inOrden(root.right);
			System.out.println(root.Value);
			
		}
		
	}
	
	public void preOrden(Node_Tree root) {
		
		if(root != null) {
			
			System.out.println(root.Value);
			inOrden(root.left);
			inOrden(root.right);
			
		}
		
	}
		


	public static void main(String[] args) throws IOException{//Main method
		
		Tree tree = new Tree();//creation object
		tree.insert(new Node_Tree(45));
		tree.insert(new Node_Tree(4));
		tree.insert(new Node_Tree(5));
		tree.insert(new Node_Tree(80));
		tree.insert(new Node_Tree(20));
		tree.insert(new Node_Tree(47));
		tree.insert(new Node_Tree(12));
		tree.inOrden(root);
		
		tree.printTree(tree.root);
		
	}//end main method
	
}//end class
